CÓDIGOS DO BANCO DE DADOS

TIPOS DE DADOS-------------------------------------------------------------------------
TEXT: tamanho variável de campo com bastante caracter
CHAR: tamanho fixo, sempre ocupa aquele espaço (por exemplo, sempre 
irá ocupar 10 campos mesmo que só tenha 5 caracteres, pegando mais espaço)
VARCHAR: ocupa menos espaço, pega a proporção de acordo com a quantidade 
de caracter

INT: num inteiro
FLOAT: num decimal (float(7,5) = 7 caracteres e 5 decimais ex: 12.34567)

DATE: YYYY/mm/dd
TIME: hora
DATETIME: date + time 

RENOMEAR TABELAS-------------------------------------------------------------------------
RENAME TABLE <nome atual> TO <nome novo>

INCLUINDO, EDITANDO E REMOVENDO TABELAS-------------------------------------------------------------------------
ALTER TABLE
ADD: inclusão de uma nova coluna
CHANGE: alteração do nome da coluna e de suas propriedades
DROP: remoção

ALTER TABLE <tabela> ADD COLUMN <nome da coluna e seu tipo>
ALTER TABLE <tabela> CHANGE <nome da coluna que quer editar> <pode mudar
o nome da coluna e seus tipos>
(se não quiser mudar o nome e apenas os dados, tem que recopiar o nome)
ALTER TABLE <tabela> DROP <nome da coluna>

INSERT-------------------------------------------------------------------------
INSERT INTO <tabela>(<colunas>)VALUES(<valores>)

CONSULTANDO DADOS--------------------------------------------------------------
SELECT <colunas> FROM <tabela> (* = todos)

FILTRANDO DADOS (WHERE)--------------------------------------------------------
SELECT * FROM <tabela> WHERE <coluna> <operador>

-Operadores comparação: =, =>, <=, <, >
-Lógicos: OR (pelo menos um tem que atender) ou AND (todos tem que atender 
a comparação)
-BETWEEN (valores em um intervalo específico)
Normal: ...WHERE idade >= 18 AND idade <= 21
Between: ...WHERE idade BETWEEN 18 AND 21
-IN (selecionar vários valores de uma única coluna)
Normal: ...WHERE interesse = 'Jogos' OR interesse = 'Filmes'
IN: ...WHERE interesse IN('Jogos', 'Filmes') ou para não exibir esses respectivos
valores ...WHERE interesse NOT IN('Jogos', 'Filmes')
-LIKE (Permite filtrar através de um caracter): ...WHERE interesse LIKE 
'%e%' ('%e, e%') (ou '_e_') 

ORDENANDO RESULTADO--------------------------------------------------------
ORDER BY <coluna> ASC (ascendente de acordo com a coluna escolhida, 
pode ter várias formas de ordenar em um único código)
DESC: decrescente

LIMITANDO RETORNO---------------------------------------------------------
-LIMIT: define o limite de registros
-OFFSET: a partir de tal registro é pra exibir o limite
ORDER BY <coluna> LIMIT <quantidade> OFFSET <valor> (opcional colocar o
OFFSET)

FUNÇÕES DE AGREGAÇÃO-------------------------------------------------------
SELECT MIN(<coluna>) = menor valor
SELECT MAX(<coluna>) = maior valor
SELECT ABG(<coluna>) = média dos valores
SELECT SUM(<coluna>) = soma dos valores
SELECT COUNT(*) = quantidade de todos os registros da tabela (podendo 
usar filtros também) (utilizando AS conseguimos apelidar a coluna do 
COUNT)

AGRUPADO SELEÇÃO DE REGISTROS----------------------------------------------------
GROUP BY = agrupa os registros
WHERE <filtro> GROUP BY <ordenação> LIMIT <limite>
HAVING (filtro sobre o agrupamento)
WHERE <filtro> GROUP BY <ordenação> HAVING <filtro sobre agrupamento> LIMIT 
<limite>

ATUALIZAR REGISTROS-------------------------------------------------------------
UPDATE <tabela> SET <coluna> = <valor> WHERE <filtro>
WHERE = caso não queira atualizar todos os registros informados
exemplo: UPDATE tb_alunos SET nome = 'João' WHERE id_aluno = 3

EXCLUINDO REGISTROS-------------------------------------------------------------
DELETE FROM <tabela> WHERE <filtro> (é recomendável usar uma coluna de ativo e 
inativo (caso o registro tenha importância), e atualizar usando o UPDATE)

RELACIONAMENTO ENTRE TABELAS-------------------------------------------------------------
Chave primária: identificador único
Chave estrangeira: referência da chave primária de outra tabela

UM para UM (apenas um dado para um dado)
UM para MUITOS (pode inserir vários dados para uma tabela através de uma 
chave estrangeira)
MUITOS para MUITOS 

CHAVE ESTRANGEIRA---------------------------------------------------------------
FOREIGN KEY(<chave estrangeira>) REFERENCES <tabela que vem a chave>
(<chave estrangeira>)
REFERENCES : referência

